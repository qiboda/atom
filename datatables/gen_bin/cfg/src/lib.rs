
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/

#![allow(clippy::all)]

pub mod prelude{
    pub use crate::*;
    pub use crate::item::*;
    pub use crate::test::*;
}

use crate::item::*;
use crate::test::*;
use bevy::asset::AssetApp;


type AbstractBase = dyn std::any::Any + Sync + Send;

pub trait GetBase<'a, T> {
    fn get_base(&'a self) -> Result<T, LubanError>;
}

#[derive(Debug)]
pub enum LubanError {
    Loader(String),
    Table(String),
    Bean(String),
    Polymorphic(String),
    Unknown(String),
}

impl std::error::Error for LubanError {}

impl std::fmt::Display for LubanError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            LubanError::Loader(msg) |
            LubanError::Table(msg) |
            LubanError::Bean(msg) |
            LubanError::Polymorphic(msg) |
            LubanError::Unknown(msg) => msg,
        })
    }
}

#[derive(Debug, thiserror::Error)]
pub enum TableLoaderError {
    #[error("serde json error: {0}")]
    SerdeJsonError(#[from] serde_json::error::Error),
    #[error("io error: {0}")]
    IOError(#[from] std::io::Error),
    #[error("luban error: {0}")]
    LubanError(#[from] LubanError),
}

#[derive(Debug, bevy::prelude::Resource, Default)]
pub struct Tables{
    pub TbItem: bevy::asset::Handle<crate::item::TbItem>,
}



impl Tables {
    pub fn new<G: Clone + Send + Sync + 'static>(asset_server: bevy::prelude::Res<bevy::asset::AssetServer>, tables_path: std::path::PathBuf, guard: G) -> Tables {
        Tables {
            tb_item: asset_server.load_acquire(tables_path.join("item_tbitem.bytes"), guard.clone()),
        }
    }
}

#[derive(Default)]
pub struct TableAssetsPlugin;

impl bevy::app::Plugin for TableAssetsPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app
            .init_asset_loader::<TbItemLoader>()
            .init_asset::<TbItem>()
            ;
    }
}

pub mod item;
pub mod test;

use luban_lib::*;
use serde::Deserialize;
use bevy::prelude::*;
use bevy::asset::AsyncReadExt;

#[derive(Debug)]
pub struct vector2 {
    pub x: f32,
    pub y: f32,
}

impl vector2{
    pub fn new(mut buf: &mut ByteBuf) -> Result<vector2, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        
        Ok(vector2 { x, y, })
    }

    pub const __ID__: i32 = 337790799;
}

#[derive(Debug)]
pub struct vector3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl vector3{
    pub fn new(mut buf: &mut ByteBuf) -> Result<vector3, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        let z = buf.read_float();
        
        Ok(vector3 { x, y, z, })
    }

    pub const __ID__: i32 = 337790800;
}

#[derive(Debug)]
pub struct vector4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}

impl vector4{
    pub fn new(mut buf: &mut ByteBuf) -> Result<vector4, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        let z = buf.read_float();
        let w = buf.read_float();
        
        Ok(vector4 { x, y, z, w, })
    }

    pub const __ID__: i32 = 337790801;
}

#[derive(Debug)]
pub struct Item {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 价格
    pub price: i32,
    /// 引用当前表
    pub upgrade_to_item_id: i32,
    /// 过期时间
    pub expire_time: Option<u64>,
    /// 能否批量使用
    pub batch_useable: bool,
    /// 品质
    pub quality: crate::item::EQuality,
    /// 道具兑换配置
    pub exchange_stream: crate::item::ItemExchange,
    pub exchange_list: Vec<crate::item::ItemExchange>,
    /// 道具兑换配置
    pub exchange_column: crate::item::ItemExchange,
}

impl Item{
    pub fn new(mut buf: &mut ByteBuf) -> Result<Item, LubanError> {
        let id = buf.read_int();
        let name = buf.read_string();
        let desc = buf.read_string();
        let price = buf.read_int();
        let upgrade_to_item_id = buf.read_int();
        let mut expire_time = if buf.read_bool() { Some(buf.read_ulong()) } else { None };
        let batch_useable = buf.read_bool();
        let quality = buf.read_int().into();
        let exchange_stream = crate::item::ItemExchange::new(&mut buf)?;
        let exchange_list = {let n0 = std::cmp::min(buf.read_size(), buf.size());let mut _e0 = vec![]; for i0 in 0..n0 { _e0.push(crate::item::ItemExchange::new(&mut buf)?); } _e0 };
        let exchange_column = crate::item::ItemExchange::new(&mut buf)?;
        
        Ok(Item { id, name, desc, price, upgrade_to_item_id, expire_time, batch_useable, quality, exchange_stream, exchange_list, exchange_column, })
    }

    pub const __ID__: i32 = 2289459;
}


