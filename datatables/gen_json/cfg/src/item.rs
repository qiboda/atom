
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use serde::Deserialize;

#[derive(Deserialize, Debug, Hash, Eq, PartialEq, macros::EnumFromNum)]
pub enum EQuality {
    ///最差品质
    WHITE = 1,
    ///蓝色的
    BLUE = 2,
    ///紫色的
    PURPLE = 3,
    ///最高品质
    RED = 4,
}

impl From<i32> for EQuality {
    fn from(value: i32) -> Self {
        match value { 
            1 => EQuality::WHITE,
            2 => EQuality::BLUE,
            3 => EQuality::PURPLE,
            4 => EQuality::RED,
            _ => panic!("Invalid value for EQuality:{}", value),
        }
    }
}

#[derive(Debug)]
pub struct ItemExchange {
    /// 道具id
    pub id: i32,
    /// 道具数量
    pub num: i32,
}

impl ItemExchange{
    pub fn new(json: &serde_json::Value) -> Result<ItemExchange, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let num = (json["num"].as_i64().unwrap() as i32);
        
        Ok(ItemExchange { id, num, })
    }
}


#[derive(Debug)]
pub struct TbItem {
    pub data_list: Vec<std::sync::Arc<crate::Item>>,
    pub data_map: std::collections::HashMap<i32, std::sync::Arc<crate::Item>>,
}

impl TbItem {
    pub fn new(json: &serde_json::Value) -> Result<std::sync::Arc<TbItem>, LubanError> {
        let mut data_map: std::collections::HashMap<i32, std::sync::Arc<crate::Item>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::Item>> = vec![];

        for x in json.as_array().unwrap() {
            let row = std::sync::Arc::new(crate::Item::new(&x)?);
            data_list.push(row.clone());
            data_map.insert(row.id.clone(), row.clone());
        }

        Ok(std::sync::Arc::new(TbItem { data_map, data_list }))
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::Item>> {
        self.data_map.get(key).map(|x| x.clone())
    }
}

impl std::ops::Index<i32> for TbItem {
    type Output = std::sync::Arc<crate::Item>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}


