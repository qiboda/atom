
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;

#[derive(Debug, Hash, Eq, PartialEq, macros::EnumFromNum)]
pub enum EQuality {
    ///最差品质
    WHITE = 1,
    ///蓝色的
    BLUE = 2,
    ///紫色的
    PURPLE = 3,
    ///最高品质
    RED = 4,
}

impl From<i32> for EQuality {
    fn from(value: i32) -> Self {        match value { 
            1 => EQuality::WHITE,
            2 => EQuality::BLUE,
            3 => EQuality::PURPLE,
            4 => EQuality::RED,
            _ => panic!("Invalid value for EQuality:{}", value),
        }
    }
}

#[derive(Debug)]
pub struct ItemExchange {
    /// 道具id
    pub id: i32,
    /// 道具数量
    pub num: i32,
}

impl ItemExchange{
    pub fn new(mut buf: &mut luban_lib::ByteBuf) -> Result<ItemExchange, LubanError> {
        let id = buf.read_int();
        let num = buf.read_int();
        
        Ok(ItemExchange { id, num, })
    }

    pub const __ID__: i32 = 1814660465;
}








#[derive(Debug, bevy::asset::Asset, bevy::reflect::TypePath)]
pub struct TbItem {
    pub data_list: Vec<std::sync::Arc<crate::Item>>,
    pub data_map: bevy::utils::HashMap<i32, std::sync::Arc<crate::Item>>,
}

impl TbItem {
    pub fn new(mut buf: luban_lib::ByteBuf) -> Result<TbItem, LubanError> {
        let mut data_map: bevy::utils::HashMap<i32, std::sync::Arc<crate::Item>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::Item>> = vec![];

        for x in (0..buf.read_size()).rev() {
            let row = std::sync::Arc::new(crate::Item::new(&mut buf)?);
            data_list.push(row.clone());
            data_map.insert(row.id.clone(), row.clone());
        }

        Ok(TbItem { data_map, data_list })
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::Item>> {
        self.data_map.get(key).map(|x| x.clone())
    }
}

impl std::ops::Index<i32> for TbItem {
    type Output = std::sync::Arc<crate::Item>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}
impl luban_lib::table::Table for TbItem {
    type Value = std::sync::Arc<crate::Item>;
}
pub type TbItemKey = i32;
#[derive(Debug, Default, bevy::prelude::Component)]
pub struct TbItemRow {
    pub key: TbItemKey,
    pub data: Option<std::sync::Arc<crate::Item>>,
}

impl luban_lib::table::MapTable for TbItem {
    type Key = TbItemKey;

    fn get_row(&self, key: &Self::Key) -> Option<Self::Value> {
        self.data_map.get(key).map(|x| x.clone())
    }
}


#[derive(Debug, Default)]
pub struct TbItemLoader;

impl bevy::asset::AssetLoader for TbItemLoader {
    type Asset = TbItem;

    type Settings = ();

    type Error = TableLoaderError;

    async fn load<'a>(
        &'a self,
        reader: &'a mut bevy::asset::io::Reader<'_>,
        settings: &'a Self::Settings,
        load_context: &'a mut bevy::asset::LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
        bevy::log::info!("TbItemLoader loading start");
        let mut bytes = Vec::new();
        use bevy::asset::AsyncReadExt;
        reader.read_to_end(&mut bytes).await?;
        let buf = luban_lib::ByteBuf::new(bytes);
        let tb = TbItem::new(buf).unwrap();
        bevy::log::info!("TbItemLoader loading over");
        Ok(tb)
    }

    fn extensions(&self) -> &[&str] {
        &["bytes"]
    }
}


