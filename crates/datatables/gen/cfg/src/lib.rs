
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/

#![allow(warnings)]
#![allow(clippy::all)]




pub mod prelude{
    pub use crate::*;
    pub use crate::effect::*;
    pub use crate::layertag::*;
    pub use crate::unit::*;
    pub use crate::item::*;
    pub use crate::global::*;
    pub use crate::test::*;
}

use crate::effect::*;
use crate::layertag::*;
use crate::unit::*;
use crate::item::*;
use crate::global::*;
use crate::test::*;


type AbstractBase = dyn std::any::Any + Sync + Send;

pub trait GetBase<'a, T> {
    fn get_base(&'a self) -> Result<T, LubanError>;
}

#[derive(Debug)]
pub enum LubanError {
    Loader(String),
    Table(String),
    Bean(String),
    Polymorphic(String),
    Unknown(String),
}

impl std::error::Error for LubanError {}

impl std::fmt::Display for LubanError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            LubanError::Loader(msg) |
            LubanError::Table(msg) |
            LubanError::Bean(msg) |
            LubanError::Polymorphic(msg) |
            LubanError::Unknown(msg) => msg,
        })
    }
}
    
#[derive(Debug, thiserror::Error)]
pub enum TableLoaderError {
    #[error("serde json error: {0}")]
    SerdeJsonError(#[from] serde_json::error::Error),
    #[error("io error: {0}")]
    IOError(#[from] std::io::Error),
    #[error("luban error: {0}")]
    LubanError(#[from] LubanError),
}

#[derive(Debug, bevy::prelude::Resource, Default)]
pub struct Tables{
    pub tb_ability: bevy::asset::Handle<crate::effect::TbAbility>,
    pub tb_buff: bevy::asset::Handle<crate::effect::TbBuff>,
    pub tb_layer_tag: bevy::asset::Handle<crate::layertag::TbLayerTag>,
    pub tb_monster: bevy::asset::Handle<crate::unit::TbMonster>,
    pub tb_npc: bevy::asset::Handle<crate::unit::TbNpc>,
    pub tb_player: bevy::asset::Handle<crate::unit::TbPlayer>,
    pub tb_relation_ship: bevy::asset::Handle<crate::unit::TbRelationShip>,
    pub tb_item: bevy::asset::Handle<crate::item::TbItem>,
    pub tb_global: bevy::asset::Handle<crate::global::TbGlobal>,
    pub tb_multi_index_list: bevy::asset::Handle<crate::test::TbMultiIndexList>,
    pub tb_multi_union_index_list: bevy::asset::Handle<crate::test::TbMultiUnionIndexList>,
    pub tb_null_index_list: bevy::asset::Handle<crate::test::TbNullIndexList>,
    pub table_handle_map: bevy::utils::HashMap<std::any::TypeId, bevy::asset::UntypedHandle>,
}

impl Tables {
    pub fn new<G: Clone + Send + Sync + 'static>(asset_server: bevy::prelude::Res<bevy::asset::AssetServer>, tables_path: std::path::PathBuf, guard: G) -> Tables {
        let mut tables = Tables {
            tb_ability: asset_server.load_acquire(tables_path.join("effect_tbability.json"), guard.clone()),
            tb_buff: asset_server.load_acquire(tables_path.join("effect_tbbuff.json"), guard.clone()),
            tb_layer_tag: asset_server.load_acquire(tables_path.join("layertag_tblayertag.json"), guard.clone()),
            tb_monster: asset_server.load_acquire(tables_path.join("unit_tbmonster.json"), guard.clone()),
            tb_npc: asset_server.load_acquire(tables_path.join("unit_tbnpc.json"), guard.clone()),
            tb_player: asset_server.load_acquire(tables_path.join("unit_tbplayer.json"), guard.clone()),
            tb_relation_ship: asset_server.load_acquire(tables_path.join("unit_tbrelationship.json"), guard.clone()),
            tb_item: asset_server.load_acquire(tables_path.join("item_tbitem.json"), guard.clone()),
            tb_global: asset_server.load_acquire(tables_path.join("global_tbglobal.json"), guard.clone()),
            tb_multi_index_list: asset_server.load_acquire(tables_path.join("test_tbmultiindexlist.json"), guard.clone()),
            tb_multi_union_index_list: asset_server.load_acquire(tables_path.join("test_tbmultiunionindexlist.json"), guard.clone()),
            tb_null_index_list: asset_server.load_acquire(tables_path.join("test_tbnullindexlist.json"), guard.clone()),
            table_handle_map: bevy::utils::HashMap::default(),
        };

        tables.table_handle_map.insert(std::any::TypeId::of::<crate::effect::TbAbility>(), tables.tb_ability.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::effect::TbBuff>(), tables.tb_buff.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::layertag::TbLayerTag>(), tables.tb_layer_tag.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::unit::TbMonster>(), tables.tb_monster.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::unit::TbNpc>(), tables.tb_npc.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::unit::TbPlayer>(), tables.tb_player.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::unit::TbRelationShip>(), tables.tb_relation_ship.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::item::TbItem>(), tables.tb_item.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::global::TbGlobal>(), tables.tb_global.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::test::TbMultiIndexList>(), tables.tb_multi_index_list.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::test::TbMultiUnionIndexList>(), tables.tb_multi_union_index_list.clone_weak().untyped());
        tables.table_handle_map.insert(std::any::TypeId::of::<crate::test::TbNullIndexList>(), tables.tb_null_index_list.clone_weak().untyped());

        tables
    }

    pub fn get_table_handle<T: 'static + bevy::asset::Asset>(&self) -> Result<bevy::asset::Handle<T>, LubanError> {
        self.table_handle_map
            .get(&std::any::TypeId::of::<T>())
            .map(|handle| handle.clone_weak().typed())
            .ok_or(LubanError::Table(format!("table not found: {}", std::any::type_name::<T>())))
    }
}

#[derive(Default)]
pub struct TableAssetsPlugin;

impl bevy::app::Plugin for TableAssetsPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        use bevy::asset::AssetApp;
        app
            .add_event::<TablesLoadedEvent>()
            .init_asset_loader::<TbAbilityLoader>()
            .init_asset::<TbAbility>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbAbility>)
            .init_asset_loader::<TbBuffLoader>()
            .init_asset::<TbBuff>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbBuff>)
            .init_asset_loader::<TbLayerTagLoader>()
            .init_asset::<TbLayerTag>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbLayerTag>)
            .init_asset_loader::<TbMonsterLoader>()
            .init_asset::<TbMonster>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbMonster>)
            .init_asset_loader::<TbNpcLoader>()
            .init_asset::<TbNpc>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbNpc>)
            .init_asset_loader::<TbPlayerLoader>()
            .init_asset::<TbPlayer>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbPlayer>)
            .init_asset_loader::<TbRelationShipLoader>()
            .init_asset::<TbRelationShip>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbRelationShip>)
            .init_asset_loader::<TbItemLoader>()
            .init_asset::<TbItem>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbItem>)
            .init_asset_loader::<TbGlobalLoader>()
            .init_asset::<TbGlobal>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbGlobal>)
            .init_asset_loader::<TbMultiIndexListLoader>()
            .init_asset::<TbMultiIndexList>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbMultiIndexList>)
            .init_asset_loader::<TbMultiUnionIndexListLoader>()
            .init_asset::<TbMultiUnionIndexList>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbMultiUnionIndexList>)
            .init_asset_loader::<TbNullIndexListLoader>()
            .init_asset::<TbNullIndexList>()
            .add_systems(bevy::app::PreUpdate, table_asset_loadeds::<TbNullIndexList>)
            ;
    }
}

#[derive(Debug, bevy::ecs::event::Event)]
pub struct TablesLoadedEvent {
    pub asset_handles: smallvec::SmallVec<[bevy::asset::UntypedHandle;1]>,
}


fn table_asset_loadeds<A: bevy::asset::Asset>(
    mut event_reader: bevy::prelude::EventReader<bevy::asset::AssetEvent<A>>,
    mut event_writer: bevy::prelude::EventWriter<TablesLoadedEvent>,
    tables: bevy::prelude::Res<Tables>,
    asset_server: bevy::prelude::Res<bevy::asset::AssetServer>,
) {
    let mut asset_handles = smallvec::SmallVec::<[bevy::asset::UntypedHandle;1]>::new();
    for event in event_reader.read() {
        if let bevy::asset::AssetEvent::<A>::Modified { id } = event {
           if tables.table_handle_map.iter().all(|(k, v)| {
                asset_server.get_load_state(v) == Some(bevy::asset::LoadState::Loaded)
            }) {
                let handle = asset_server.get_id_handle(*id).unwrap();
                asset_handles.push(handle.untyped());
            }
        }
    }
    if asset_handles.len() > 0 {
        event_writer.send(TablesLoadedEvent { asset_handles });
    }
}

#[derive(Default)]
pub struct TableProtocolPlugin;

impl bevy::app::Plugin for TableProtocolPlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        use client::ComponentSyncMode;
        use lightyear::prelude::*;
        app.register_component::<TbAbilityRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbBuffRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbLayerTagRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbMonsterRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbNpcRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbPlayerRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbRelationShipRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbItemRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
        app.register_component::<TbMultiUnionIndexListRow>(ChannelDirection::ServerToClient)
            .add_prediction(ComponentSyncMode::Once);
    }
}

pub mod effect;
pub mod layertag;
pub mod unit;
pub mod item;
pub mod global;
pub mod test;


#[derive(bevy::reflect::Reflect, Debug)]
pub struct vector2 {
    pub x: f32,
    pub y: f32,
}

impl vector2{
    pub fn new(json: &serde_json::Value) -> Result<vector2, LubanError> {
        let x = (json["x"].as_f64().unwrap() as f32);
        let y = (json["y"].as_f64().unwrap() as f32);
        
        Ok(vector2 { x, y, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct vector3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl vector3{
    pub fn new(json: &serde_json::Value) -> Result<vector3, LubanError> {
        let x = (json["x"].as_f64().unwrap() as f32);
        let y = (json["y"].as_f64().unwrap() as f32);
        let z = (json["z"].as_f64().unwrap() as f32);
        
        Ok(vector3 { x, y, z, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct vector4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}

impl vector4{
    pub fn new(json: &serde_json::Value) -> Result<vector4, LubanError> {
        let x = (json["x"].as_f64().unwrap() as f32);
        let y = (json["y"].as_f64().unwrap() as f32);
        let z = (json["z"].as_f64().unwrap() as f32);
        let w = (json["w"].as_f64().unwrap() as f32);
        
        Ok(vector4 { x, y, z, w, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Global {
    /// 参数1
    pub x1: i32,
    /// 道具
    pub x2: i32,
    pub x3: i32,
    pub x4: i32,
    pub x5: i32,
    pub x6: i32,
    pub x7: Vec<i32>,
}

impl Global{
    pub fn new(json: &serde_json::Value) -> Result<Global, LubanError> {
        let x1 = (json["x1"].as_i64().unwrap() as i32);
        let x2 = (json["x2"].as_i64().unwrap() as i32);
        let x3 = (json["x3"].as_i64().unwrap() as i32);
        let x4 = (json["x4"].as_i64().unwrap() as i32);
        let x5 = (json["x5"].as_i64().unwrap() as i32);
        let x6 = (json["x6"].as_i64().unwrap() as i32);
        let x7 = json["x7"].as_array().unwrap().iter().map(|field| (field.as_i64().unwrap() as i32)).collect();
        
        Ok(Global { x1, x2, x3, x4, x5, x6, x7, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct NullIndexList {
    pub x: i32,
    pub y: i32,
}

impl NullIndexList{
    pub fn new(json: &serde_json::Value) -> Result<NullIndexList, LubanError> {
        let x = (json["x"].as_i64().unwrap() as i32);
        let y = (json["y"].as_i64().unwrap() as i32);
        
        Ok(NullIndexList { x, y, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct RelationShip {
    /// 主动方阵营
    pub active_camp: i32,
    /// 被动方阵营
    pub passive_camp: i32,
    /// 关系
    pub relationship_type: crate::unit::RelationShipType,
}

impl RelationShip{
    pub fn new(json: &serde_json::Value) -> Result<RelationShip, LubanError> {
        let active_camp = (json["active_camp"].as_i64().unwrap() as i32);
        let passive_camp = (json["passive_camp"].as_i64().unwrap() as i32);
        let relationship_type = json["relationship_type"].as_i64().unwrap().into();
        
        Ok(RelationShip { active_camp, passive_camp, relationship_type, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct MultiUnionIndexList {
    pub id1: i32,
    pub id2: i32,
    pub id3: String,
    pub num: i32,
    pub desc: String,
}

impl MultiUnionIndexList{
    pub fn new(json: &serde_json::Value) -> Result<MultiUnionIndexList, LubanError> {
        let id1 = (json["id1"].as_i64().unwrap() as i32);
        let id2 = (json["id2"].as_i64().unwrap() as i32);
        let id3 = json["id3"].as_str().unwrap().to_string();
        let num = (json["num"].as_i64().unwrap() as i32);
        let desc = json["desc"].as_str().unwrap().to_string();
        
        Ok(MultiUnionIndexList { id1, id2, id3, num, desc, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct MultiIndexList {
    pub id1: i32,
    pub id2: i32,
    pub id3: String,
    pub num: i32,
    pub desc: String,
}

impl MultiIndexList{
    pub fn new(json: &serde_json::Value) -> Result<MultiIndexList, LubanError> {
        let id1 = (json["id1"].as_i64().unwrap() as i32);
        let id2 = (json["id2"].as_i64().unwrap() as i32);
        let id3 = json["id3"].as_str().unwrap().to_string();
        let num = (json["num"].as_i64().unwrap() as i32);
        let desc = json["desc"].as_str().unwrap().to_string();
        
        Ok(MultiIndexList { id1, id2, id3, num, desc, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct LayerTag {
    /// layertag，以.作为分隔符
    pub raw_layertag: String,
    /// 描述
    pub desc: String,
    /// 是否计数
    pub counter: bool,
}

impl LayerTag{
    pub fn new(json: &serde_json::Value) -> Result<LayerTag, LubanError> {
        let raw_layertag = json["raw_layertag"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let counter = json["counter"].as_bool().unwrap();
        
        Ok(LayerTag { raw_layertag, desc, counter, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Player {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 阵营
    pub camp: i32,
    /// 碰撞体半径
    pub capsule_radius: f32,
    /// 碰撞体高度
    pub capsule_height: f32,
}

impl Player{
    pub fn new(json: &serde_json::Value) -> Result<Player, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let camp = (json["camp"].as_i64().unwrap() as i32);
        let capsule_radius = (json["capsule_radius"].as_f64().unwrap() as f32);
        let capsule_height = (json["capsule_height"].as_f64().unwrap() as f32);
        
        Ok(Player { id, name, desc, camp, capsule_radius, capsule_height, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Buff {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 技能图类型名字
    pub graph_class: String,
    /// 最大层数
    pub max_layer: i32,
    /// 时长
    pub duration: f32,
    /// 间隔
    pub interval: f32,
    /// 技能启动需要的状态
    pub start_required_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub start_disabled_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub start_added_layertags: Vec<crate::effect::RevertableLayerTag>,
    /// 技能启动需要的状态
    pub start_removed_layertags: Vec<crate::effect::RevertableLayerTag>,
    /// 技能启动需要的状态
    pub abort_required_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub abort_disabled_layertags: Vec<String>,
}

impl Buff{
    pub fn new(json: &serde_json::Value) -> Result<Buff, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let graph_class = json["graph_class"].as_str().unwrap().to_string();
        let max_layer = (json["max_layer"].as_i64().unwrap() as i32);
        let duration = (json["duration"].as_f64().unwrap() as f32);
        let interval = (json["interval"].as_f64().unwrap() as f32);
        let start_required_layertags = json["start_required_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let start_disabled_layertags = json["start_disabled_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let start_added_layertags = json["start_added_layertags"].as_array().unwrap().iter().map(|field| crate::effect::RevertableLayerTag::new(&field).unwrap()).collect();
        let start_removed_layertags = json["start_removed_layertags"].as_array().unwrap().iter().map(|field| crate::effect::RevertableLayerTag::new(&field).unwrap()).collect();
        let abort_required_layertags = json["abort_required_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let abort_disabled_layertags = json["abort_disabled_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        
        Ok(Buff { id, name, desc, graph_class, max_layer, duration, interval, start_required_layertags, start_disabled_layertags, start_added_layertags, start_removed_layertags, abort_required_layertags, abort_disabled_layertags, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Ability {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 技能图类型名字
    pub graph_class: String,
    /// 类型
    pub activation_type: crate::effect::AbilityType,
    /// CD
    pub cd: f32,
    /// 技能启动需要的状态
    pub start_required_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub start_disabled_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub start_added_layertags: Vec<crate::effect::RevertableLayerTag>,
    /// 技能启动需要的状态
    pub start_removed_layertags: Vec<crate::effect::RevertableLayerTag>,
    /// 技能启动需要的状态
    pub abort_required_layertags: Vec<String>,
    /// 技能启动需要的状态
    pub abort_disabled_layertags: Vec<String>,
}

impl Ability{
    pub fn new(json: &serde_json::Value) -> Result<Ability, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let graph_class = json["graph_class"].as_str().unwrap().to_string();
        let activation_type = json["activation_type"].as_i64().unwrap().into();
        let cd = (json["cd"].as_f64().unwrap() as f32);
        let start_required_layertags = json["start_required_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let start_disabled_layertags = json["start_disabled_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let start_added_layertags = json["start_added_layertags"].as_array().unwrap().iter().map(|field| crate::effect::RevertableLayerTag::new(&field).unwrap()).collect();
        let start_removed_layertags = json["start_removed_layertags"].as_array().unwrap().iter().map(|field| crate::effect::RevertableLayerTag::new(&field).unwrap()).collect();
        let abort_required_layertags = json["abort_required_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        let abort_disabled_layertags = json["abort_disabled_layertags"].as_array().unwrap().iter().map(|field| field.as_str().unwrap().to_string()).collect();
        
        Ok(Ability { id, name, desc, graph_class, activation_type, cd, start_required_layertags, start_disabled_layertags, start_added_layertags, start_removed_layertags, abort_required_layertags, abort_disabled_layertags, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Monster {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 阵营
    pub camp: i32,
}

impl Monster{
    pub fn new(json: &serde_json::Value) -> Result<Monster, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let camp = (json["camp"].as_i64().unwrap() as i32);
        
        Ok(Monster { id, name, desc, camp, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Npc {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 阵营
    pub camp: i32,
}

impl Npc{
    pub fn new(json: &serde_json::Value) -> Result<Npc, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let camp = (json["camp"].as_i64().unwrap() as i32);
        
        Ok(Npc { id, name, desc, camp, })
    }
}

#[derive(bevy::reflect::Reflect, Debug)]
pub struct Item {
    /// 这是id
    pub id: i32,
    /// 名字
    pub name: String,
    /// 描述
    pub desc: String,
    /// 价格
    pub price: i32,
    /// 引用当前表
    pub upgrade_to_item_id: i32,
    /// 过期时间
    pub expire_time: Option<u64>,
    /// 能否批量使用
    pub batch_useable: bool,
    /// 品质
    pub quality: crate::item::EQuality,
    /// 道具兑换配置
    pub exchange_stream: crate::item::ItemExchange,
    pub exchange_list: Vec<crate::item::ItemExchange>,
    /// 道具兑换配置
    pub exchange_column: crate::item::ItemExchange,
}

impl Item{
    pub fn new(json: &serde_json::Value) -> Result<Item, LubanError> {
        let id = (json["id"].as_i64().unwrap() as i32);
        let name = json["name"].as_str().unwrap().to_string();
        let desc = json["desc"].as_str().unwrap().to_string();
        let price = (json["price"].as_i64().unwrap() as i32);
        let upgrade_to_item_id = (json["upgrade_to_item_id"].as_i64().unwrap() as i32);
        let mut expire_time = None; if let Some(value) = json.get("expire_time") { expire_time = Some((json["expire_time"].as_i64().unwrap() as u64)); }
        let batch_useable = json["batch_useable"].as_bool().unwrap();
        let quality = json["quality"].as_i64().unwrap().into();
        let exchange_stream = crate::item::ItemExchange::new(&json["exchange_stream"])?;
        let exchange_list = json["exchange_list"].as_array().unwrap().iter().map(|field| crate::item::ItemExchange::new(&field).unwrap()).collect();
        let exchange_column = crate::item::ItemExchange::new(&json["exchange_column"])?;
        
        Ok(Item { id, name, desc, price, upgrade_to_item_id, expire_time, batch_useable, quality, exchange_stream, exchange_list, exchange_column, })
    }
}


