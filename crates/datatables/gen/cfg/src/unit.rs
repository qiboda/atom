
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;








#[derive(Debug, bevy::asset::Asset, bevy::reflect::TypePath)]
pub struct TbUnit {
    pub data_list: Vec<std::sync::Arc<crate::Unit>>,
    pub data_map: bevy::utils::HashMap<i32, std::sync::Arc<crate::Unit>>,
}

impl TbUnit {
    pub fn new(mut buf: luban_lib::ByteBuf) -> Result<TbUnit, LubanError> {
        let mut data_map: bevy::utils::HashMap<i32, std::sync::Arc<crate::Unit>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::Unit>> = vec![];

        for x in (0..buf.read_size()).rev() {
            let row = std::sync::Arc::new(crate::Unit::new(&mut buf)?);
            data_list.push(row.clone());
            data_map.insert(row.id.clone(), row.clone());
        }

        Ok(TbUnit { data_map, data_list })
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::Unit>> {
        self.data_map.get(key).map(|x| x.clone())
    }
}

impl std::ops::Index<i32> for TbUnit {
    type Output = std::sync::Arc<crate::Unit>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}
impl luban_lib::table::Table for TbUnit {
    type Value = std::sync::Arc<crate::Unit>;
}
pub type TbUnitKey = i32;
impl luban_lib::table::MapTable for TbUnit {
    type Key = TbUnitKey;

    fn get_row(&self, key: &Self::Key) -> Option<Self::Value> {
        self.data_map.get(key).map(|x| x.clone())
    }
}


#[derive(Debug, Default)]
pub struct TbUnitLoader;

impl bevy::asset::AssetLoader for TbUnitLoader {
    type Asset = TbUnit;

    type Settings = ();

    type Error = TableLoaderError;

    async fn load<'a>(
        &'a self,
        reader: &'a mut bevy::asset::io::Reader<'_>,
        settings: &'a Self::Settings,
        load_context: &'a mut bevy::asset::LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
        bevy::log::info!("TbUnitLoader loading start");
        let mut bytes = Vec::new();
        use bevy::asset::AsyncReadExt;
        reader.read_to_end(&mut bytes).await?;
        let buf = luban_lib::ByteBuf::new(bytes);
        let tb = TbUnit::new(buf).unwrap();
        bevy::log::info!("TbUnitLoader loading over");
        Ok(tb)
    }

    fn extensions(&self) -> &[&str] {
        &["bytes"]
    }
}


