
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;








#[derive(Debug, bevy::reflect::Reflect, bevy::asset::Asset)]
pub struct TbLayerTag {
    pub data_list: Vec<std::sync::Arc<crate::LayerTag>>,
    pub data_map: bevy::utils::HashMap<String, std::sync::Arc<crate::LayerTag>>,
}

impl TbLayerTag {
    pub fn new(mut buf: luban_lib::ByteBuf) -> Result<TbLayerTag, LubanError> {
        let mut data_map: bevy::utils::HashMap<String, std::sync::Arc<crate::LayerTag>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::LayerTag>> = vec![];

        for x in (0..buf.read_size()).rev() {
            let row = std::sync::Arc::new(crate::LayerTag::new(&mut buf)?);
            data_list.push(row.clone());
            data_map.insert(row.raw_layertag.clone(), row.clone());
        }

        Ok(TbLayerTag { data_map, data_list })
    }

    pub fn get(&self, key: &String) -> Option<std::sync::Arc<crate::LayerTag>> {
        self.data_map.get(key).map(|x| x.clone())
    }
}

impl std::ops::Index<String> for TbLayerTag {
    type Output = std::sync::Arc<crate::LayerTag>;

    fn index(&self, index: String) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}
impl luban_lib::table::Table for TbLayerTag {
    type Value = std::sync::Arc<crate::LayerTag>;
}
pub type TbLayerTagKey = String;
#[derive(Debug, Default, Clone, bevy::reflect::Reflect, bevy::prelude::Component)]
pub struct TbLayerTagRow {
    pub key: TbLayerTagKey,
    pub data: Option<std::sync::Arc<crate::LayerTag>>,
}

impl TbLayerTagRow {
    pub fn new(key: TbLayerTagKey, data: Option<std::sync::Arc<crate::LayerTag>>) -> Self {
        Self { key, data }
    }

    pub fn key(&self) -> &TbLayerTagKey {
        &self.key
    }

    pub fn set_key(&mut self, key: TbLayerTagKey) {
        self.key = key;
    }

    pub fn set_data(&mut self, data: Option<std::sync::Arc<crate::LayerTag>>) {
        self.data = data;
    }

    pub fn get_data(&self) -> Option<std::sync::Arc<crate::LayerTag>> {
        self.data.clone()
    }

    pub fn data(&self) -> std::sync::Arc<crate::LayerTag> {
        self.data.clone().unwrap()
    }
}


impl luban_lib::table::MapTable for TbLayerTag {
    type Key = TbLayerTagKey;
    type List = Vec<std::sync::Arc<crate::LayerTag>>;
    type Map = bevy::utils::HashMap<Self::Key, Self::Value>;

    fn get_row(&self, key: &Self::Key) -> Option<Self::Value> {
        self.data_map.get(key).map(|x| x.clone())
    }

    fn get_data_list(&self) -> &Self::List {
        &self.data_list
    }

    fn get_data_map(&self) -> &Self::Map {
        &self.data_map
    }
}


#[derive(Debug, Default)]
pub struct TbLayerTagLoader;

impl bevy::asset::AssetLoader for TbLayerTagLoader {
    type Asset = TbLayerTag;

    type Settings = ();

    type Error = TableLoaderError;

    async fn load<'a>(
        &'a self,
        reader: &'a mut bevy::asset::io::Reader<'_>,
        settings: &'a Self::Settings,
        load_context: &'a mut bevy::asset::LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
        bevy::log::info!("TbLayerTagLoader loading start");
        let mut bytes = Vec::new();
        use bevy::asset::AsyncReadExt;
        reader.read_to_end(&mut bytes).await?;
        let buf = luban_lib::ByteBuf::new(bytes);
        let tb = TbLayerTag::new(buf).unwrap();
        bevy::log::info!("TbLayerTagLoader loading over");
        Ok(tb)
    }

    fn extensions(&self) -> &[&str] {
        &["bytes"]
    }
}


