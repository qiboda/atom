use std::sync::Mutex;

use noise::NoiseFn;

/// Noise function that caches the last output value generated by the source
/// function.
///
/// If the input coordinates passed to `Cache::get` are equal to the previous
/// call, the function returns the cached result of the previous call to
/// `Source::get`. Otherwise, `Source::get` is called with the new coordinates,
/// overwriting the cache with the result, and returning the result to the
/// caller.
///
/// Caching a noise function is useful if it is used as a source function for
/// multiple noise functions. If a source function is not cached, the source
/// function will redundantly calculate the same output value once for each
/// noise function in which it is included.
#[derive(Debug)]
pub struct ACache<Source> {
    /// Outputs the value to be cached.
    pub source: Source,

    value: Mutex<Option<f64>>,

    point: Mutex<Vec<f64>>,
}

impl<Source> Clone for ACache<Source>
where
    Source: Clone,
{
    fn clone(&self) -> Self {
        ACache {
            source: self.source.clone(),
            value: Mutex::new(*self.value.lock().unwrap()),
            point: Mutex::new(self.point.lock().unwrap().clone()),
        }
    }
}

impl<Source> ACache<Source> {
    pub fn new(source: Source) -> Self {
        ACache {
            source,
            value: Mutex::new(None),
            point: Mutex::new(Vec::new()),
        }
    }
}

impl<Source, const DIM: usize> NoiseFn<f64, DIM> for ACache<Source>
where
    Source: NoiseFn<f64, DIM>,
{
    fn get(&self, point: [f64; DIM]) -> f64 {
        let mut value = self.value.lock().unwrap();
        match value.as_ref() {
            Some(value) if quick_eq(&self.point.lock().unwrap(), &point) => *value,
            Some(_) | None => {
                let source_value = self.source.get(point);
                *value = Some(source_value);

                let mut cached_point = self.point.lock().unwrap();
                cached_point.clear();
                cached_point.extend_from_slice(&point);

                source_value
            }
        }
    }
}

fn quick_eq(a: &[f64], b: &[f64]) -> bool {
    assert_eq!(a.len(), b.len());

    a.iter().eq(b)
}
